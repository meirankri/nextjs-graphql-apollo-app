{"version":3,"file":"static/webpack/static\\development\\pages\\portfolios.js.3d7f06a89440a269ee05.hot-update.js","sources":["webpack:///./pages/portfolios/index.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks';\r\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO } from '@/apollo/queries';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport { useState, useEffect } from 'react'\r\nimport withApollo from '@/hoc/withApollo';\r\n\r\n\r\n\r\nconst graphUpdatePortfolio = (id) => {\r\n  const query = `\r\n  mutation updatePortfolio {\r\n    updatePortfolio(id: \"${id}\", input: {\r\n       title: \"Update Job\"\r\n        company: \"update Company\"\r\n        companyWebsite: \"update Website\"\r\n        location: \"update Location\"\r\n        jobTitle: \"update Job Title\"\r\n        description: \"update Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n\r\n    }){\r\n      _id\r\n      title\r\n      company\r\n      companyWebsite\r\n      location\r\n      jobTitle\r\n      description\r\n      startDate\r\n        endDate\r\n    }\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.updatePortfolio)\r\n}\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.deletePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = () =>{\r\n\r\nconst [portfolios, setPortfolios] = useState([])\r\nconst [getPortfolios, {loading, data}] = useLazyQuery(GET_PORTFOLIOS)\r\nconst [createPortfolio]\r\n= useMutation(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n\r\nuseEffect(()=>{\r\n  getPortfolios()\r\n},[])\r\n\r\nif (data && data.portfolios.length > 0 && (portfolios.length === 0 || data.portfolios.length !== portfolios.length )) {\r\n  setPortfolios(data.portfolios)\r\n}\r\nif (loading ) {return 'Loading...'}\r\n\r\n\r\n\r\nconst updatePortfolio = async( id)=>{\r\n  const updated = await graphUpdatePortfolio(id)\r\n  console.log(updated);\r\n\r\n  const index = portfolios.findIndex(p => p._id === id)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios[index] = updated\r\n  setPortfolios(newPortfolios)\r\n\r\n\r\n}\r\n\r\nconst deletePortfolio = async (id) =>{\r\n  const deletedPortfolio = await graphDeletePortfolio(id)\r\n  const index = portfolios.findIndex(p => p._id === deletedPortfolio)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios.splice(index,1)\r\n  setPortfolios(newPortfolios)\r\n}\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio(portfolio._id)}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio(portfolio._id)}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\n// Portfolios.getInitialProps = async () =>{\r\n//   const portfolios = await fetchPortfolios()\r\n//   return {\r\n//     data: {portfolios}\r\n//   }\r\n// }\r\n\r\nexport default withApollo(Portfolios)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAFA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AATA;AALA;AAAA;AACA;AAgwBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}