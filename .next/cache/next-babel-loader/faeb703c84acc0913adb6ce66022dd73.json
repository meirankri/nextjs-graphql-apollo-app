{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport { useState } from 'react';\n\nvar fetchPortfolios = function fetchPortfolios() {\n  var query = \"\\n    query Portfolios {\\n      portfolios {\\n        _id,\\n        title,\\n        company,\\n        companyWebsite\\n        location\\n        jobTitle\\n        description\\n      }\\n    }\";\n  return axios.post('http://localhost:3000/graphql', {\n    query: query\n  }).then(function (_ref) {\n    var graph = _ref.data;\n    return graph.data;\n  }).then(function (data) {\n    return data.portfolios;\n  });\n};\n\nvar graphCreatePortfolio = function graphCreatePortfolio() {\n  var query = \"\\n    mutation CreatePortfolio {\\n      createPortfolio(input: {\\n        title: \\\"New Job\\\"\\n        company: \\\"New Company\\\"\\n        companyWebsite: \\\"New Website\\\"\\n        location: \\\"New Location\\\"\\n        jobTitle: \\\"New Job Title\\\"\\n        description: \\\"New Desc\\\"\\n        startDate: \\\"12/12/2012\\\"\\n        endDate: \\\"14/11/2013\\\"\\n      }) {\\n        _id,\\n        title,\\n        company,\\n        companyWebsite\\n        location\\n        jobTitle\\n        description\\n        startDate\\n        endDate\\n      }\\n    }\";\n  return axios.post('http://localhost:3000/graphql', {\n    query: query\n  }).then(function (_ref2) {\n    var graph = _ref2.data;\n    return graph.data;\n  }).then(function (data) {\n    return data.createPortfolio;\n  });\n};\n\nvar graphUpdatePortfolio = function graphUpdatePortfolio(id) {\n  var query = \"\\n  mutation updatePortfolio {\\n    updatePortfolio(id: \\\"\".concat(id, \"\\\", input: {\\n       title: \\\"Update Job\\\"\\n        company: \\\"update Company\\\"\\n        companyWebsite: \\\"update Website\\\"\\n        location: \\\"update Location\\\"\\n        jobTitle: \\\"update Job Title\\\"\\n        description: \\\"update Desc\\\"\\n        startDate: \\\"12/12/2012\\\"\\n        endDate: \\\"14/11/2013\\\"\\n\\n    }){\\n      _id\\n      title\\n      company\\n      companyWebsite\\n      location\\n      jobTitle\\n      description\\n      startDate\\n        endDate\\n    }\\n  }\");\n  return axios.post('http://localhost:3000/graphql', {\n    query: query\n  }).then(function (_ref3) {\n    var graph = _ref3.data;\n    return graph.data;\n  }).then(function (data) {\n    return data.createPortfolio;\n  });\n};\n\nvar Portfolios = function Portfolios(_ref4) {\n  var data = _ref4.data;\n\n  var _useState = useState(data.portfolios),\n      portfolios = _useState[0],\n      setPortfolios = _useState[1];\n\n  var createPortfolio = function createPortfolio() {\n    var newPortfolio, newPortfolios;\n    return _regeneratorRuntime.async(function createPortfolio$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(graphCreatePortfolio());\n\n          case 2:\n            newPortfolio = _context.sent;\n            newPortfolios = [].concat(_toConsumableArray(portfolios), [newPortfolio]);\n            setPortfolios(newPortfolios);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var updatePortfolio = function updatePortfolio(id) {\n    return _regeneratorRuntime.async(function updatePortfolio$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            graphUpdatePortfolio(id);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(function (portfolio) {\n    return __jsx(\"div\", {\n      key: portfolio._id,\n      className: \"col-md-4\"\n    }, __jsx(Link, {\n      href: \"/portfolios/[id]\",\n      as: \"/portfolios/\".concat(portfolio._id)\n    }, __jsx(\"a\", {\n      className: \"card-link\"\n    }, __jsx(PortfolioCard, {\n      portfolio: portfolio\n    }))), __jsx(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: function onClick() {\n        return updatePortfolio(portfolio._id);\n      }\n    }, \"update portfolio\"));\n  }))));\n};\n\nPortfolios.getInitialProps = function _callee() {\n  var portfolios;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fetchPortfolios());\n\n        case 2:\n          portfolios = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            data: {\n              portfolios: portfolios\n            }\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Portfolios;","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","PortfolioCard","Link","useState","fetchPortfolios","query","post","then","graph","data","portfolios","graphCreatePortfolio","createPortfolio","graphUpdatePortfolio","id","Portfolios","setPortfolios","newPortfolio","newPortfolios","updatePortfolio","map","portfolio","_id","getInitialProps"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,KAAK,kMAAX;AAYA,SAAOL,KAAK,CAACM,IAAN,CAAW,+BAAX,EAA4C;AAAED,IAAAA,KAAK,EAALA;AAAF,GAA5C,EACJE,IADI,CACC;AAAA,QAAQC,KAAR,QAAEC,IAAF;AAAA,WAAmBD,KAAK,CAACC,IAAzB;AAAA,GADD,EAEJF,IAFI,CAEC,UAAAE,IAAI;AAAA,WAAIA,IAAI,CAACC,UAAT;AAAA,GAFL,CAAP;AAGD,CAhBD;;AAiBA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,MAAMN,KAAK,6hBAAX;AAuBA,SAAOL,KAAK,CAACM,IAAN,CAAW,+BAAX,EAA4C;AAAED,IAAAA,KAAK,EAALA;AAAF,GAA5C,EACJE,IADI,CACC;AAAA,QAAQC,KAAR,SAAEC,IAAF;AAAA,WAAmBD,KAAK,CAACC,IAAzB;AAAA,GADD,EAEJF,IAFI,CAEC,UAAAE,IAAI;AAAA,WAAIA,IAAI,CAACG,eAAT;AAAA,GAFL,CAAP;AAGD,CA3BD;;AA4BA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,EAAD,EAAQ;AACnC,MAAMT,KAAK,uEAEcS,EAFd,keAAX;AAwBA,SAAOd,KAAK,CAACM,IAAN,CAAW,+BAAX,EAA4C;AAAED,IAAAA,KAAK,EAALA;AAAF,GAA5C,EACJE,IADI,CACC;AAAA,QAAQC,KAAR,SAAEC,IAAF;AAAA,WAAmBD,KAAK,CAACC,IAAzB;AAAA,GADD,EAEJF,IAFI,CAEC,UAAAE,IAAI;AAAA,WAAIA,IAAI,CAACG,eAAT;AAAA,GAFL,CAAP;AAGD,CA5BD;;AA+BA,IAAMG,UAAU,GAAG,SAAbA,UAAa,QAAW;AAAA,MAATN,IAAS,SAATA,IAAS;;AAAA,kBACMN,QAAQ,CAACM,IAAI,CAACC,UAAN,CADd;AAAA,MACvBA,UADuB;AAAA,MACXM,aADW;;AAG9B,MAAMJ,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACKD,oBAAoB,EADzB;;AAAA;AAChBM,YAAAA,YADgB;AAEhBC,YAAAA,aAFgB,gCAEIR,UAFJ,IAEgBO,YAFhB;AAGtBD,YAAAA,aAAa,CAACE,aAAD,CAAb;;AAHsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAMA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAOL,EAAP;AAAA;AAAA;AAAA;AAAA;AACtBD,YAAAA,oBAAoB,CAACC,EAAD,CAApB;;AADsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAGE,SACE,4BACE;AAAS,IAAA,SAAS,EAAC;AAAnB,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,+BADF,CADF,CADF,CADF,EAQE;AACE,IAAA,OAAO,EAAEF,eADX;AAEE,IAAA,SAAS,EAAC;AAFZ,wBARF,EAaE;AAAS,IAAA,SAAS,EAAC;AAAnB,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGF,UAAU,CAACU,GAAX,CAAe,UAAAC,SAAS;AAAA,WACvB;AAAK,MAAA,GAAG,EAAEA,SAAS,CAACC,GAApB;AAAyB,MAAA,SAAS,EAAC;AAAnC,OACE,MAAC,IAAD;AACE,MAAA,IAAI,oBADN;AAEE,MAAA,EAAE,wBAAiBD,SAAS,CAACC,GAA3B;AAFJ,OAGE;AAAG,MAAA,SAAS,EAAC;AAAb,OAAyB,MAAC,aAAD;AAAe,MAAA,SAAS,EAAED;AAA1B,MAAzB,CAHF,CADF,EAME;AACA,MAAA,SAAS,EAAC,iBADV;AAEA,MAAA,OAAO,EAAE;AAAA,eAAMF,eAAe,CAACE,SAAS,CAACC,GAAX,CAArB;AAAA;AAFT,0BANF,CADuB;AAAA,GAAxB,CADH,CADF,CAbF,CADF;AAkCD,CA9CD;;AA+CAP,UAAU,CAACQ,eAAX,GAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACFnB,eAAe,EADb;;AAAA;AACrBM,UAAAA,UADqB;AAAA,4CAEpB;AACLD,YAAAA,IAAI,EAAE;AAACC,cAAAA,UAAU,EAAVA;AAAD;AADD,WAFoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AAOA,eAAeK,UAAf","sourcesContent":["import axios from 'axios';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport { useState } from 'react'\r\n\r\nconst fetchPortfolios = () => {\r\n  const query = `\r\n    query Portfolios {\r\n      portfolios {\r\n        _id,\r\n        title,\r\n        company,\r\n        companyWebsite\r\n        location\r\n        jobTitle\r\n        description\r\n      }\r\n    }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.portfolios)\r\n}\r\nconst graphCreatePortfolio = () => {\r\n  const query = `\r\n    mutation CreatePortfolio {\r\n      createPortfolio(input: {\r\n        title: \"New Job\"\r\n        company: \"New Company\"\r\n        companyWebsite: \"New Website\"\r\n        location: \"New Location\"\r\n        jobTitle: \"New Job Title\"\r\n        description: \"New Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n      }) {\r\n        _id,\r\n        title,\r\n        company,\r\n        companyWebsite\r\n        location\r\n        jobTitle\r\n        description\r\n        startDate\r\n        endDate\r\n      }\r\n    }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.createPortfolio)\r\n}\r\nconst graphUpdatePortfolio = (id) => {\r\n  const query = `\r\n  mutation updatePortfolio {\r\n    updatePortfolio(id: \"${id}\", input: {\r\n       title: \"Update Job\"\r\n        company: \"update Company\"\r\n        companyWebsite: \"update Website\"\r\n        location: \"update Location\"\r\n        jobTitle: \"update Job Title\"\r\n        description: \"update Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n\r\n    }){\r\n      _id\r\n      title\r\n      company\r\n      companyWebsite\r\n      location\r\n      jobTitle\r\n      description\r\n      startDate\r\n        endDate\r\n    }\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.createPortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = ({data}) =>{\r\nconst [portfolios, setPortfolios] = useState(data.portfolios)\r\n\r\nconst createPortfolio = async () =>{\r\n  const newPortfolio = await graphCreatePortfolio()\r\n  const newPortfolios = [...portfolios, newPortfolio]\r\n  setPortfolios(newPortfolios)\r\n}\r\n\r\nconst updatePortfolio = async( id)=>{\r\n  graphUpdatePortfolio(id)\r\n}\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio(portfolio._id)}>\r\n              update portfolio</button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\nPortfolios.getInitialProps = async () =>{\r\n  const portfolios = await fetchPortfolios()\r\n  return {\r\n    data: {portfolios}\r\n  }\r\n}\r\n\r\nexport default Portfolios\r\n"]},"metadata":{},"sourceType":"module"}