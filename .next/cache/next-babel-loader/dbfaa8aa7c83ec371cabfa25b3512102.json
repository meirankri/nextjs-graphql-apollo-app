{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport { useState } from 'react';\n\nconst fetchPortfolios = () => {\n  const query = `\n    query Portfolios {\n      portfolios {\n        _id,\n        title,\n        company,\n        companyWebsite\n        location\n        jobTitle\n        description\n      }\n    }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.portfolios);\n};\n\nconst graphCreatePortfolio = () => {\n  const query = `\n    mutation CreatePortfolio {\n      createPortfolio(input: {\n        title: \"New Job\"\n        company: \"New Company\"\n        companyWebsite: \"New Website\"\n        location: \"New Location\"\n        jobTitle: \"New Job Title\"\n        description: \"New Desc\"\n        startDate: \"12/12/2012\"\n        endDate: \"14/11/2013\"\n      }) {\n        _id,\n        title,\n        company,\n        companyWebsite\n        location\n        jobTitle\n        description\n        startDate\n        endDate\n      }\n    }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.createPortfolio);\n};\n\nconst graphUpdatePortfolio = id => {\n  const query = `\n  mutation updatePortfolio {\n    updatePortfolio(id: \"${id}\", input: {\n       title: \"Update Job\"\n        company: \"update Company\"\n        companyWebsite: \"update Website\"\n        location: \"update Location\"\n        jobTitle: \"update Job Title\"\n        description: \"update Desc\"\n        startDate: \"12/12/2012\"\n        endDate: \"14/11/2013\"\n\n    }){\n      _id\n      title\n      company\n      companyWebsite\n      location\n      jobTitle\n      description\n      startDate\n        endDate\n    }\n  }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.updatePortfolio);\n};\n\nconst graphDeletePortfolio = id => {\n  const query = `\n  mutation deletePortfolio {\n    deletePortfolio(id: \"${id}\")\n  }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.updatePortfolio);\n};\n\nconst Portfolios = ({\n  data\n}) => {\n  const {\n    0: portfolios,\n    1: setPortfolios\n  } = useState(data.portfolios);\n\n  const createPortfolio = async () => {\n    const newPortfolio = await graphCreatePortfolio();\n    const newPortfolios = [...portfolios, newPortfolio];\n    setPortfolios(newPortfolios);\n  };\n\n  const updatePortfolio = async id => {\n    const updated = await graphUpdatePortfolio(id);\n    console.log(updated);\n    const index = portfolios.findIndex(p => p._id === id);\n    const newPortfolios = portfolios.slice();\n    newPortfolios[index] = updated;\n    setPortfolios(newPortfolios);\n  };\n\n  const deletePortfolio = async id => {\n    const deletedPortfolio = await graphDeletePortfolio(id);\n    const index = portfolios.findIndex(p => p._id === deletedPortfolio);\n    const newPortfolios = portfolios.slice();\n    newPortfolios / splice(index, 1);\n    setPortfolios(newPortfolios);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(portfolio => __jsx(\"div\", {\n    key: portfolio._id,\n    className: \"col-md-4\"\n  }, __jsx(Link, {\n    href: `/portfolios/[id]`,\n    as: `/portfolios/${portfolio._id}`\n  }, __jsx(\"a\", {\n    className: \"card-link\"\n  }, __jsx(PortfolioCard, {\n    portfolio: portfolio\n  }))), __jsx(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: () => updatePortfolio(portfolio._id)\n  }, \"update portfolio\"), __jsx(\"button\", {\n    onClick: () => deletePortfolio(portfolio._id),\n    className: \"btn btn-danger\"\n  }, \"delete portfolio\"))))));\n};\n\nPortfolios.getInitialProps = async () => {\n  const portfolios = await fetchPortfolios();\n  return {\n    data: {\n      portfolios\n    }\n  };\n};\n\nexport default Portfolios;","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","PortfolioCard","Link","useState","fetchPortfolios","query","post","then","data","graph","portfolios","graphCreatePortfolio","createPortfolio","graphUpdatePortfolio","id","updatePortfolio","graphDeletePortfolio","Portfolios","setPortfolios","newPortfolio","newPortfolios","updated","console","log","index","findIndex","p","_id","slice","deletePortfolio","deletedPortfolio","splice","map","portfolio","getInitialProps"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport { useState } from 'react'\r\n\r\nconst fetchPortfolios = () => {\r\n  const query = `\r\n    query Portfolios {\r\n      portfolios {\r\n        _id,\r\n        title,\r\n        company,\r\n        companyWebsite\r\n        location\r\n        jobTitle\r\n        description\r\n      }\r\n    }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.portfolios)\r\n}\r\nconst graphCreatePortfolio = () => {\r\n  const query = `\r\n    mutation CreatePortfolio {\r\n      createPortfolio(input: {\r\n        title: \"New Job\"\r\n        company: \"New Company\"\r\n        companyWebsite: \"New Website\"\r\n        location: \"New Location\"\r\n        jobTitle: \"New Job Title\"\r\n        description: \"New Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n      }) {\r\n        _id,\r\n        title,\r\n        company,\r\n        companyWebsite\r\n        location\r\n        jobTitle\r\n        description\r\n        startDate\r\n        endDate\r\n      }\r\n    }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.createPortfolio)\r\n}\r\nconst graphUpdatePortfolio = (id) => {\r\n  const query = `\r\n  mutation updatePortfolio {\r\n    updatePortfolio(id: \"${id}\", input: {\r\n       title: \"Update Job\"\r\n        company: \"update Company\"\r\n        companyWebsite: \"update Website\"\r\n        location: \"update Location\"\r\n        jobTitle: \"update Job Title\"\r\n        description: \"update Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n\r\n    }){\r\n      _id\r\n      title\r\n      company\r\n      companyWebsite\r\n      location\r\n      jobTitle\r\n      description\r\n      startDate\r\n        endDate\r\n    }\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.updatePortfolio)\r\n}\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.updatePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = ({data}) =>{\r\nconst [portfolios, setPortfolios] = useState(data.portfolios)\r\n\r\nconst createPortfolio = async () =>{\r\n  const newPortfolio = await graphCreatePortfolio()\r\n  const newPortfolios = [...portfolios, newPortfolio]\r\n  setPortfolios(newPortfolios)\r\n}\r\n\r\nconst updatePortfolio = async( id)=>{\r\n  const updated = await graphUpdatePortfolio(id)\r\n  console.log(updated);\r\n\r\n  const index = portfolios.findIndex(p => p._id === id)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios[index] = updated\r\n  setPortfolios(newPortfolios)\r\n\r\n\r\n}\r\n\r\nconst deletePortfolio = async (id) =>{\r\n  const deletedPortfolio = await graphDeletePortfolio(id)\r\n  const index = portfolios.findIndex(p => p._id === deletedPortfolio)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios/splice(index,1)\r\n  setPortfolios(newPortfolios)\r\n}\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio(portfolio._id)}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio(portfolio._id)}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\nPortfolios.getInitialProps = async () =>{\r\n  const portfolios = await fetchPortfolios()\r\n  return {\r\n    data: {portfolios}\r\n  }\r\n}\r\n\r\nexport default Portfolios\r\n"]},"metadata":{},"sourceType":"module"}