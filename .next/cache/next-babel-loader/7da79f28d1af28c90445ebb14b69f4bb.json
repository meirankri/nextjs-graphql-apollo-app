{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO, UPDATE_PORTFOLIO } from '@/apollo/queries';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport withApollo from '@/hoc/withApollo';\nimport { getDataFromTree } from '@apollo/react-ssr';\n\nconst graphDeletePortfolio = id => {\n  const query = `\n  mutation deletePortfolio {\n    deletePortfolio(id: \"${id}\")\n  }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.deletePortfolio);\n};\n\nconst Portfolios = () => {\n  const {\n    data\n  } = useQuery(GET_PORTFOLIOS);\n  const [updatePortfolio] = useMutation(UPDATE_PORTFOLIO);\n  const [createPortfolio] = useMutation(CREATE_PORTFOLIO, {\n    update(cache, {\n      data: {\n        createPortfolio\n      }\n    }) {\n      // get data from the cache\n      const {\n        portfolios\n      } = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }); //write on the cache the same data with the new data that we create\n\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: [...portfolios, createPortfolio]\n        }\n      });\n    }\n\n  });\n\n  const deletePortfolio = async id => {\n    const deletedPortfolio = await graphDeletePortfolio(id);\n  };\n\n  const portfolios = data && data.portfolios || [];\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(portfolio => __jsx(\"div\", {\n    key: portfolio._id,\n    className: \"col-md-4\"\n  }, __jsx(Link, {\n    href: `/portfolios/[id]`,\n    as: `/portfolios/${portfolio._id}`\n  }, __jsx(\"a\", {\n    className: \"card-link\"\n  }, __jsx(PortfolioCard, {\n    portfolio: portfolio\n  }))), __jsx(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: () => updatePortfolio({\n      variables: {\n        id: portfolio._id\n      }\n    })\n  }, \"update portfolio\"), __jsx(\"button\", {\n    onClick: () => deletePortfolio(portfolio._id),\n    className: \"btn btn-danger\"\n  }, \"delete portfolio\"))))));\n}; // Portfolios.getInitialProps = async () =>{\n//   const portfolios = await fetchPortfolios()\n//   return {\n//     data: {portfolios}\n//   }\n// }\n\n\nexport default withApollo(Portfolios, {\n  getDataFromTree\n});","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","useQuery","useMutation","GET_PORTFOLIOS","CREATE_PORTFOLIO","UPDATE_PORTFOLIO","PortfolioCard","Link","withApollo","getDataFromTree","graphDeletePortfolio","id","query","post","then","data","graph","deletePortfolio","Portfolios","updatePortfolio","createPortfolio","update","cache","portfolios","readQuery","writeQuery","deletedPortfolio","map","portfolio","_id","variables"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO, UPDATE_PORTFOLIO } from '@/apollo/queries';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport withApollo from '@/hoc/withApollo';\r\nimport { getDataFromTree } from '@apollo/react-ssr';\r\n\r\n\r\n\r\n\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.deletePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = () =>{\r\n\r\nconst {data} = useQuery(GET_PORTFOLIOS)\r\nconst [updatePortfolio] = useMutation(UPDATE_PORTFOLIO)\r\n\r\nconst [createPortfolio] = useMutation(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n\r\n\r\n\r\nconst deletePortfolio = async (id) =>{\r\n  const deletedPortfolio = await graphDeletePortfolio(id)\r\n\r\n}\r\n  const portfolios = data && data.portfolios || [];\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio({variables: {id: portfolio._id}})}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio(portfolio._id)}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\n// Portfolios.getInitialProps = async () =>{\r\n//   const portfolios = await fetchPortfolios()\r\n//   return {\r\n//     data: {portfolios}\r\n//   }\r\n// }\r\n\r\nexport default withApollo(Portfolios, { getDataFromTree })\r\n"]},"metadata":{},"sourceType":"module"}