{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useGetPortfolio, useUpdatePortfolio, useDeletePortfolio, useCreatePortfolio } from '@/apollo/actions';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport withApollo from '@/hoc/withApollo';\nimport { getDataFromTree } from '@apollo/react-ssr';\n\nconst graphDeletePortfolio = id => {\n  const query = `\n  mutation deletePortfolio {\n    deletePortfolio(id: \"${id}\")\n  }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.deletePortfolio);\n};\n\nconst Portfolios = () => {\n  const {\n    data\n  } = useGetPortfolio(GET_PORTFOLIOS);\n  const [updatePortfolio] = useUpdatePortfolio(UPDATE_PORTFOLIO);\n  const [deletePortfolio] = useDeletePortfolio(DELETE_PORTFOLIO, {\n    update(cache, {\n      data: {\n        deletePortfolio\n      }\n    }) {\n      const {\n        portfolios\n      } = cache.readQuery({\n        query: GET_PORTFOLIOS\n      });\n      const newPortfolios = portfolios.filter(p => p._id !== deletePortfolio);\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: newPortfolios\n        }\n      });\n    }\n\n  });\n  const [createPortfolio] = useCreatePortfolio(CREATE_PORTFOLIO, {\n    update(cache, {\n      data: {\n        createPortfolio\n      }\n    }) {\n      // get data from the cache\n      const {\n        portfolios\n      } = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }); //write on the cache the same data with the new data that we create\n\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: [...portfolios, createPortfolio]\n        }\n      });\n    }\n\n  });\n  const portfolios = data && data.portfolios || [];\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(portfolio => __jsx(\"div\", {\n    key: portfolio._id,\n    className: \"col-md-4\"\n  }, __jsx(Link, {\n    href: `/portfolios/[id]`,\n    as: `/portfolios/${portfolio._id}`\n  }, __jsx(\"a\", {\n    className: \"card-link\"\n  }, __jsx(PortfolioCard, {\n    portfolio: portfolio\n  }))), __jsx(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: () => updatePortfolio({\n      variables: {\n        id: portfolio._id\n      }\n    })\n  }, \"update portfolio\"), __jsx(\"button\", {\n    onClick: () => deletePortfolio({\n      variables: {\n        id: portfolio._id\n      }\n    }),\n    className: \"btn btn-danger\"\n  }, \"delete portfolio\"))))));\n}; // Portfolios.getInitialProps = async () =>{\n//   const portfolios = await fetchPortfolios()\n//   return {\n//     data: {portfolios}\n//   }\n// }\n\n\nexport default withApollo(Portfolios, {\n  getDataFromTree\n});","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","useGetPortfolio","useUpdatePortfolio","useDeletePortfolio","useCreatePortfolio","PortfolioCard","Link","withApollo","getDataFromTree","graphDeletePortfolio","id","query","post","then","data","graph","deletePortfolio","Portfolios","GET_PORTFOLIOS","updatePortfolio","UPDATE_PORTFOLIO","DELETE_PORTFOLIO","update","cache","portfolios","readQuery","newPortfolios","filter","p","_id","writeQuery","createPortfolio","CREATE_PORTFOLIO","map","portfolio","variables"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  useGetPortfolio,\r\n  useUpdatePortfolio,\r\n  useDeletePortfolio,\r\n  useCreatePortfolio } from '@/apollo/actions';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport withApollo from '@/hoc/withApollo';\r\nimport { getDataFromTree } from '@apollo/react-ssr';\r\n\r\n\r\n\r\n\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.deletePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = () =>{\r\n\r\nconst {data} = useGetPortfolio(GET_PORTFOLIOS)\r\nconst [updatePortfolio] = useUpdatePortfolio(UPDATE_PORTFOLIO)\r\nconst [deletePortfolio] = useDeletePortfolio(DELETE_PORTFOLIO,{\r\n  update(cache, {data: {deletePortfolio}}){\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    const newPortfolios = portfolios.filter(p=> p._id !== deletePortfolio)\r\n    cache.writeQuery({\r\n      query:GET_PORTFOLIOS,\r\n      data: {portfolios: newPortfolios}\r\n    })\r\n  }\r\n}\r\n  )\r\nconst [createPortfolio] = useCreatePortfolio(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n\r\n\r\n  const portfolios = data && data.portfolios || [];\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio({variables: {id: portfolio._id}})}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio({variables: {id: portfolio._id}})}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\n// Portfolios.getInitialProps = async () =>{\r\n//   const portfolios = await fetchPortfolios()\r\n//   return {\r\n//     data: {portfolios}\r\n//   }\r\n// }\r\n\r\nexport default withApollo(Portfolios, { getDataFromTree })\r\n"]},"metadata":{},"sourceType":"module"}