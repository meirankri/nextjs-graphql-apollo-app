{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO } from '@/apollo/queries';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport withApollo from '@/hoc/withApollo';\nimport { getDataFromTree } from '@apollo/react-ssr';\n\nvar graphUpdatePortfolio = function graphUpdatePortfolio(id) {\n  var query = \"\\n  mutation updatePortfolio {\\n    updatePortfolio(id: \\\"\".concat(id, \"\\\", input: {\\n       title: \\\"Update Job\\\"\\n        company: \\\"update Company\\\"\\n        companyWebsite: \\\"update Website\\\"\\n        location: \\\"update Location\\\"\\n        jobTitle: \\\"update Job Title\\\"\\n        description: \\\"update Desc\\\"\\n        startDate: \\\"12/12/2012\\\"\\n        endDate: \\\"14/11/2013\\\"\\n\\n    }){\\n      _id\\n      title\\n      company\\n      companyWebsite\\n      location\\n      jobTitle\\n      description\\n      startDate\\n        endDate\\n    }\\n  }\");\n  return axios.post('http://localhost:3000/graphql', {\n    query: query\n  }).then(function (_ref) {\n    var graph = _ref.data;\n    return graph.data;\n  }).then(function (data) {\n    return data.updatePortfolio;\n  });\n};\n\nvar graphDeletePortfolio = function graphDeletePortfolio(id) {\n  var query = \"\\n  mutation deletePortfolio {\\n    deletePortfolio(id: \\\"\".concat(id, \"\\\")\\n  }\");\n  return axios.post('http://localhost:3000/graphql', {\n    query: query\n  }).then(function (_ref2) {\n    var graph = _ref2.data;\n    return graph.data;\n  }).then(function (data) {\n    return data.deletePortfolio;\n  });\n};\n\nvar Portfolios = function Portfolios() {\n  var _useState = useState([]),\n      portfolios = _useState[0],\n      setPortfolios = _useState[1];\n\n  var _useLazyQuery = useLazyQuery(GET_PORTFOLIOS),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getPortfolios = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      loading = _useLazyQuery2$.loading,\n      data = _useLazyQuery2$.data;\n\n  var _useMutation = useMutation(CREATE_PORTFOLIO, {\n    update: function update(cache, _ref3) {\n      var createPortfolio = _ref3.data.createPortfolio;\n\n      // get data from the cache\n      var _cache$readQuery = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }),\n          portfolios = _cache$readQuery.portfolios; //write on the cache the same data with the new data that we create\n\n\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: [].concat(_toConsumableArray(portfolios), [createPortfolio])\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createPortfolio = _useMutation2[0];\n\n  useEffect(function () {\n    getPortfolios();\n  }, []);\n\n  if (data && data.portfolios.length > 0 && (portfolios.length === 0 || data.portfolios.length !== portfolios.length)) {\n    setPortfolios(data.portfolios);\n  }\n\n  if (loading) {\n    return 'Loading...';\n  }\n\n  var updatePortfolio = function updatePortfolio(id) {\n    var updated, index, newPortfolios;\n    return _regeneratorRuntime.async(function updatePortfolio$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(graphUpdatePortfolio(id));\n\n          case 2:\n            updated = _context.sent;\n            console.log(updated);\n            index = portfolios.findIndex(function (p) {\n              return p._id === id;\n            });\n            newPortfolios = portfolios.slice();\n            newPortfolios[index] = updated;\n            setPortfolios(newPortfolios);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var deletePortfolio = function deletePortfolio(id) {\n    var deletedPortfolio, index, newPortfolios;\n    return _regeneratorRuntime.async(function deletePortfolio$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(graphDeletePortfolio(id));\n\n          case 2:\n            deletedPortfolio = _context2.sent;\n            index = portfolios.findIndex(function (p) {\n              return p._id === deletedPortfolio;\n            });\n            newPortfolios = portfolios.slice();\n            newPortfolios.splice(index, 1);\n            setPortfolios(newPortfolios);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(function (portfolio) {\n    return __jsx(\"div\", {\n      key: portfolio._id,\n      className: \"col-md-4\"\n    }, __jsx(Link, {\n      href: \"/portfolios/[id]\",\n      as: \"/portfolios/\".concat(portfolio._id)\n    }, __jsx(\"a\", {\n      className: \"card-link\"\n    }, __jsx(PortfolioCard, {\n      portfolio: portfolio\n    }))), __jsx(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: function onClick() {\n        return updatePortfolio(portfolio._id);\n      }\n    }, \"update portfolio\"), __jsx(\"button\", {\n      onClick: function onClick() {\n        return deletePortfolio(portfolio._id);\n      },\n      className: \"btn btn-danger\"\n    }, \"delete portfolio\"));\n  }))));\n}; // Portfolios.getInitialProps = async () =>{\n//   const portfolios = await fetchPortfolios()\n//   return {\n//     data: {portfolios}\n//   }\n// }\n\n\nexport default withApollo(Portfolios, {\n  getDataFromTree: getDataFromTree\n});","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","useQuery","useMutation","GET_PORTFOLIOS","CREATE_PORTFOLIO","PortfolioCard","Link","useState","useEffect","withApollo","getDataFromTree","graphUpdatePortfolio","id","query","post","then","graph","data","updatePortfolio","graphDeletePortfolio","deletePortfolio","Portfolios","portfolios","setPortfolios","useLazyQuery","getPortfolios","loading","update","cache","createPortfolio","readQuery","writeQuery","length","updated","console","log","index","findIndex","p","_id","newPortfolios","slice","deletedPortfolio","splice","map","portfolio"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO } from '@/apollo/queries';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport { useState, useEffect } from 'react'\r\nimport withApollo from '@/hoc/withApollo';\r\nimport { getDataFromTree } from '@apollo/react-ssr';\r\n\r\n\r\n\r\nconst graphUpdatePortfolio = (id) => {\r\n  const query = `\r\n  mutation updatePortfolio {\r\n    updatePortfolio(id: \"${id}\", input: {\r\n       title: \"Update Job\"\r\n        company: \"update Company\"\r\n        companyWebsite: \"update Website\"\r\n        location: \"update Location\"\r\n        jobTitle: \"update Job Title\"\r\n        description: \"update Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n\r\n    }){\r\n      _id\r\n      title\r\n      company\r\n      companyWebsite\r\n      location\r\n      jobTitle\r\n      description\r\n      startDate\r\n        endDate\r\n    }\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.updatePortfolio)\r\n}\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.deletePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = () =>{\r\n\r\nconst [portfolios, setPortfolios] = useState([])\r\nconst [getPortfolios, {loading, data}] = useLazyQuery(GET_PORTFOLIOS)\r\nconst [createPortfolio]\r\n= useMutation(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n\r\nuseEffect(()=>{\r\n  getPortfolios()\r\n},[])\r\n\r\nif (data && data.portfolios.length > 0 && (portfolios.length === 0 || data.portfolios.length !== portfolios.length )) {\r\n  setPortfolios(data.portfolios)\r\n}\r\nif (loading ) {return 'Loading...'}\r\n\r\n\r\n\r\nconst updatePortfolio = async( id)=>{\r\n  const updated = await graphUpdatePortfolio(id)\r\n  console.log(updated);\r\n\r\n  const index = portfolios.findIndex(p => p._id === id)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios[index] = updated\r\n  setPortfolios(newPortfolios)\r\n\r\n\r\n}\r\n\r\nconst deletePortfolio = async (id) =>{\r\n  const deletedPortfolio = await graphDeletePortfolio(id)\r\n  const index = portfolios.findIndex(p => p._id === deletedPortfolio)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios.splice(index,1)\r\n  setPortfolios(newPortfolios)\r\n}\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio(portfolio._id)}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio(portfolio._id)}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\n// Portfolios.getInitialProps = async () =>{\r\n//   const portfolios = await fetchPortfolios()\r\n//   return {\r\n//     data: {portfolios}\r\n//   }\r\n// }\r\n\r\nexport default withApollo(Portfolios, { getDataFromTree })\r\n"]},"metadata":{},"sourceType":"module"}