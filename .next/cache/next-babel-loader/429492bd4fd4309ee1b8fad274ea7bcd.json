{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO, UPDATE_PORTFOLIO, DELETE_PORTFOLIO } from '@/apollo/actions';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport withApollo from '@/hoc/withApollo';\nimport { getDataFromTree } from '@apollo/react-ssr';\n\nvar graphDeletePortfolio = function graphDeletePortfolio(id) {\n  var query = \"\\n  mutation deletePortfolio {\\n    deletePortfolio(id: \\\"\".concat(id, \"\\\")\\n  }\");\n  return axios.post('http://localhost:3000/graphql', {\n    query: query\n  }).then(function (_ref) {\n    var graph = _ref.data;\n    return graph.data;\n  }).then(function (data) {\n    return data.deletePortfolio;\n  });\n};\n\nvar Portfolios = function Portfolios() {\n  var _useQuery = useQuery(GET_PORTFOLIOS),\n      data = _useQuery.data;\n\n  var _useMutation = useMutation(UPDATE_PORTFOLIO),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updatePortfolio = _useMutation2[0];\n\n  var _useMutation3 = useMutation(DELETE_PORTFOLIO, {\n    update: function update(cache, _ref2) {\n      var deletePortfolio = _ref2.data.deletePortfolio;\n\n      var _cache$readQuery = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }),\n          portfolios = _cache$readQuery.portfolios;\n\n      var newPortfolios = portfolios.filter(function (p) {\n        return p._id !== deletePortfolio;\n      });\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: newPortfolios\n        }\n      });\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deletePortfolio = _useMutation4[0];\n\n  var _useMutation5 = useMutation(CREATE_PORTFOLIO, {\n    update: function update(cache, _ref3) {\n      var createPortfolio = _ref3.data.createPortfolio;\n\n      // get data from the cache\n      var _cache$readQuery2 = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }),\n          portfolios = _cache$readQuery2.portfolios; //write on the cache the same data with the new data that we create\n\n\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: [].concat(_toConsumableArray(portfolios), [createPortfolio])\n        }\n      });\n    }\n  }),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      createPortfolio = _useMutation6[0];\n\n  var portfolios = data && data.portfolios || [];\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(function (portfolio) {\n    return __jsx(\"div\", {\n      key: portfolio._id,\n      className: \"col-md-4\"\n    }, __jsx(Link, {\n      href: \"/portfolios/[id]\",\n      as: \"/portfolios/\".concat(portfolio._id)\n    }, __jsx(\"a\", {\n      className: \"card-link\"\n    }, __jsx(PortfolioCard, {\n      portfolio: portfolio\n    }))), __jsx(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: function onClick() {\n        return updatePortfolio({\n          variables: {\n            id: portfolio._id\n          }\n        });\n      }\n    }, \"update portfolio\"), __jsx(\"button\", {\n      onClick: function onClick() {\n        return deletePortfolio({\n          variables: {\n            id: portfolio._id\n          }\n        });\n      },\n      className: \"btn btn-danger\"\n    }, \"delete portfolio\"));\n  }))));\n}; // Portfolios.getInitialProps = async () =>{\n//   const portfolios = await fetchPortfolios()\n//   return {\n//     data: {portfolios}\n//   }\n// }\n\n\nexport default withApollo(Portfolios, {\n  getDataFromTree: getDataFromTree\n});","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","GET_PORTFOLIOS","CREATE_PORTFOLIO","UPDATE_PORTFOLIO","DELETE_PORTFOLIO","PortfolioCard","Link","withApollo","getDataFromTree","graphDeletePortfolio","id","query","post","then","graph","data","deletePortfolio","Portfolios","useQuery","useMutation","updatePortfolio","update","cache","readQuery","portfolios","newPortfolios","filter","p","_id","writeQuery","createPortfolio","map","portfolio","variables"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  GET_PORTFOLIOS,\r\n  CREATE_PORTFOLIO,\r\n  UPDATE_PORTFOLIO,\r\n  DELETE_PORTFOLIO } from '@/apollo/actions';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport withApollo from '@/hoc/withApollo';\r\nimport { getDataFromTree } from '@apollo/react-ssr';\r\n\r\n\r\n\r\n\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.deletePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = () =>{\r\n\r\nconst {data} = useQuery(GET_PORTFOLIOS)\r\nconst [updatePortfolio] = useMutation(UPDATE_PORTFOLIO)\r\nconst [deletePortfolio] = useMutation(DELETE_PORTFOLIO,{\r\n  update(cache, {data: {deletePortfolio}}){\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    const newPortfolios = portfolios.filter(p=> p._id !== deletePortfolio)\r\n    cache.writeQuery({\r\n      query:GET_PORTFOLIOS,\r\n      data: {portfolios: newPortfolios}\r\n    })\r\n  }\r\n}\r\n  )\r\nconst [createPortfolio] = useMutation(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n\r\n\r\n  const portfolios = data && data.portfolios || [];\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio({variables: {id: portfolio._id}})}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio({variables: {id: portfolio._id}})}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\n// Portfolios.getInitialProps = async () =>{\r\n//   const portfolios = await fetchPortfolios()\r\n//   return {\r\n//     data: {portfolios}\r\n//   }\r\n// }\r\n\r\nexport default withApollo(Portfolios, { getDataFromTree })\r\n"]},"metadata":{},"sourceType":"module"}