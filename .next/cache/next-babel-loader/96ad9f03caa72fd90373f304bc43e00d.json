{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO, UPDATE_PORTFOLIO, DELETE_PORTFOLIO } from '../queries';\nexport var useGetPortfolio = function useGetPortfolio() {\n  return useQuery(GET_PORTFOLIOS);\n};\nexport var useUpdatePortfolio = function useUpdatePortfolio() {\n  return useMutation(UPDATE_PORTFOLIO);\n};\nexport var useDeletePortfolio = function useDeletePortfolio() {\n  return useMutation(DELETE_PORTFOLIO, {\n    update: function update(cache, _ref) {\n      var deletePortfolio = _ref.data.deletePortfolio;\n\n      var _cache$readQuery = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }),\n          portfolios = _cache$readQuery.portfolios;\n\n      var newPortfolios = portfolios.filter(function (p) {\n        return p._id !== deletePortfolio;\n      });\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: newPortfolios\n        }\n      });\n    }\n  });\n};\nexport var useCreatePortfolio = function useCreatePortfolio() {\n  return useMutation(CREATE_PORTFOLIO, {\n    update: function update(cache, _ref2) {\n      var createPortfolio = _ref2.data.createPortfolio;\n\n      // get data from the cache\n      var _cache$readQuery2 = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }),\n          portfolios = _cache$readQuery2.portfolios; //write on the cache the same data with the new data that we create\n\n\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: [].concat(_toConsumableArray(portfolios), [createPortfolio])\n        }\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/apollo/actions/index.js"],"names":["useQuery","useMutation","GET_PORTFOLIOS","CREATE_PORTFOLIO","UPDATE_PORTFOLIO","DELETE_PORTFOLIO","useGetPortfolio","useUpdatePortfolio","useDeletePortfolio","update","cache","deletePortfolio","data","readQuery","query","portfolios","newPortfolios","filter","p","_id","writeQuery","useCreatePortfolio","createPortfolio"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SACEC,cADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,gBAJF,QAI0B,YAJ1B;AAMA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAMN,QAAQ,CAACE,cAAD,CAAd;AAAA,CAAxB;AACP,OAAO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAMN,WAAW,CAACG,gBAAD,CAAjB;AAAA,CAA3B;AAGP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAMP,WAAW,CAACI,gBAAD,EAAkB;AACnEI,IAAAA,MADmE,kBAC5DC,KAD4D,QAC3B;AAAA,UAAlBC,eAAkB,QAAzBC,IAAyB,CAAlBD,eAAkB;;AAAA,6BACjBD,KAAK,CAACG,SAAN,CAAgB;AAACC,QAAAA,KAAK,EAAGZ;AAAT,OAAhB,CADiB;AAAA,UAC/Ba,UAD+B,oBAC/BA,UAD+B;;AAEtC,UAAMC,aAAa,GAAGD,UAAU,CAACE,MAAX,CAAkB,UAAAC,CAAC;AAAA,eAAGA,CAAC,CAACC,GAAF,KAAUR,eAAb;AAAA,OAAnB,CAAtB;AACAD,MAAAA,KAAK,CAACU,UAAN,CAAiB;AACfN,QAAAA,KAAK,EAACZ,cADS;AAEfU,QAAAA,IAAI,EAAE;AAACG,UAAAA,UAAU,EAAEC;AAAb;AAFS,OAAjB;AAID;AARkE,GAAlB,CAAjB;AAAA,CAA3B;AAWP,OAAO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAMpB,WAAW,CAACE,gBAAD,EAAkB;AACnEM,IAAAA,MADmE,kBAC5DC,KAD4D,SAC1B;AAAA,UAAlBY,eAAkB,SAA1BV,IAA0B,CAAlBU,eAAkB;;AACvC;AADuC,8BAElBZ,KAAK,CAACG,SAAN,CAAgB;AAACC,QAAAA,KAAK,EAAGZ;AAAT,OAAhB,CAFkB;AAAA,UAEhCa,UAFgC,qBAEhCA,UAFgC,EAGvC;;;AACAL,MAAAA,KAAK,CAACU,UAAN,CAAiB;AACfN,QAAAA,KAAK,EAAEZ,cADQ;AAEfU,QAAAA,IAAI,EAAE;AAACG,UAAAA,UAAU,+BAAOA,UAAP,IAAmBO,eAAnB;AAAX;AAFS,OAAjB;AAID;AATkE,GAAlB,CAAjB;AAAA,CAA3B","sourcesContent":["import { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {\r\n  GET_PORTFOLIOS,\r\n  CREATE_PORTFOLIO,\r\n  UPDATE_PORTFOLIO,\r\n  DELETE_PORTFOLIO } from '../queries';\r\n\r\nexport const useGetPortfolio = () => useQuery(GET_PORTFOLIOS)\r\nexport const useUpdatePortfolio = () => useMutation(UPDATE_PORTFOLIO)\r\n\r\n\r\nexport const useDeletePortfolio = () => useMutation(DELETE_PORTFOLIO,{\r\n  update(cache, {data: {deletePortfolio}}){\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    const newPortfolios = portfolios.filter(p=> p._id !== deletePortfolio)\r\n    cache.writeQuery({\r\n      query:GET_PORTFOLIOS,\r\n      data: {portfolios: newPortfolios}\r\n    })\r\n  }\r\n}\r\n  )\r\nexport const useCreatePortfolio = () => useMutation(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}