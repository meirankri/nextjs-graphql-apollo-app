{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO } from '@/apollo/queries';\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\";\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport withApollo from '@/hoc/withApollo';\nimport { getDataFromTree } from '@apollo/react-ssr';\n\nconst graphUpdatePortfolio = id => {\n  const query = `\n  mutation updatePortfolio {\n    updatePortfolio(id: \"${id}\", input: {\n       title: \"Update Job\"\n        company: \"update Company\"\n        companyWebsite: \"update Website\"\n        location: \"update Location\"\n        jobTitle: \"update Job Title\"\n        description: \"update Desc\"\n        startDate: \"12/12/2012\"\n        endDate: \"14/11/2013\"\n\n    }){\n      _id\n      title\n      company\n      companyWebsite\n      location\n      jobTitle\n      description\n      startDate\n        endDate\n    }\n  }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.updatePortfolio);\n};\n\nconst graphDeletePortfolio = id => {\n  const query = `\n  mutation deletePortfolio {\n    deletePortfolio(id: \"${id}\")\n  }`;\n  return axios.post('http://localhost:3000/graphql', {\n    query\n  }).then(({\n    data: graph\n  }) => graph.data).then(data => data.deletePortfolio);\n};\n\nconst Portfolios = () => {\n  const {\n    data\n  } = useQuery(GET_PORTFOLIOS);\n  const [createPortfolio] = useMutation(CREATE_PORTFOLIO, {\n    update(cache, {\n      data: {\n        createPortfolio\n      }\n    }) {\n      // get data from the cache\n      const {\n        portfolios\n      } = cache.readQuery({\n        query: GET_PORTFOLIOS\n      }); //write on the cache the same data with the new data that we create\n\n      cache.writeQuery({\n        query: GET_PORTFOLIOS,\n        data: {\n          portfolios: [...portfolios, createPortfolio]\n        }\n      });\n    }\n\n  });\n\n  const updatePortfolio = async id => {\n    const updated = await graphUpdatePortfolio(id);\n    console.log(updated);\n    const index = portfolios.findIndex(p => p._id === id);\n    const newPortfolios = portfolios.slice();\n    newPortfolios[index] = updated;\n    setPortfolios(newPortfolios);\n  };\n\n  const deletePortfolio = async id => {\n    const deletedPortfolio = await graphDeletePortfolio(id);\n    const index = portfolios.findIndex(p => p._id === deletedPortfolio);\n    const newPortfolios = portfolios.slice();\n    newPortfolios.splice(index, 1);\n    setPortfolios(newPortfolios);\n  };\n\n  const portfolios = data && data.portfolios || {};\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"section-title\"\n  }, __jsx(\"div\", {\n    className: \"px-2\"\n  }, __jsx(\"div\", {\n    className: \"pt-5 pb-4\"\n  }, __jsx(\"h1\", null, \"Portfolios\")))), __jsx(\"button\", {\n    onClick: createPortfolio,\n    className: \"btn btn-primary\"\n  }, \"create protfolio\"), __jsx(\"section\", {\n    className: \"pb-5\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, portfolios.map(portfolio => __jsx(\"div\", {\n    key: portfolio._id,\n    className: \"col-md-4\"\n  }, __jsx(Link, {\n    href: `/portfolios/[id]`,\n    as: `/portfolios/${portfolio._id}`\n  }, __jsx(\"a\", {\n    className: \"card-link\"\n  }, __jsx(PortfolioCard, {\n    portfolio: portfolio\n  }))), __jsx(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: () => updatePortfolio(portfolio._id)\n  }, \"update portfolio\"), __jsx(\"button\", {\n    onClick: () => deletePortfolio(portfolio._id),\n    className: \"btn btn-danger\"\n  }, \"delete portfolio\"))))));\n}; // Portfolios.getInitialProps = async () =>{\n//   const portfolios = await fetchPortfolios()\n//   return {\n//     data: {portfolios}\n//   }\n// }\n\n\nexport default withApollo(Portfolios, {\n  getDataFromTree\n});","map":{"version":3,"sources":["C:/Users/meir/Documents/webDeveloppement/filip-udemy-nextjs/pages/portfolios/index.js"],"names":["axios","useQuery","useMutation","GET_PORTFOLIOS","CREATE_PORTFOLIO","PortfolioCard","Link","useState","useEffect","withApollo","getDataFromTree","graphUpdatePortfolio","id","query","post","then","data","graph","updatePortfolio","graphDeletePortfolio","deletePortfolio","Portfolios","createPortfolio","update","cache","portfolios","readQuery","writeQuery","updated","console","log","index","findIndex","p","_id","newPortfolios","slice","setPortfolios","deletedPortfolio","splice","map","portfolio"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { GET_PORTFOLIOS, CREATE_PORTFOLIO } from '@/apollo/queries';\r\nimport PortfolioCard from \"@/components/portfolios/portfolioCard.js\"\r\nimport Link from 'next/link';\r\nimport { useState, useEffect } from 'react'\r\nimport withApollo from '@/hoc/withApollo';\r\nimport { getDataFromTree } from '@apollo/react-ssr';\r\n\r\n\r\n\r\nconst graphUpdatePortfolio = (id) => {\r\n  const query = `\r\n  mutation updatePortfolio {\r\n    updatePortfolio(id: \"${id}\", input: {\r\n       title: \"Update Job\"\r\n        company: \"update Company\"\r\n        companyWebsite: \"update Website\"\r\n        location: \"update Location\"\r\n        jobTitle: \"update Job Title\"\r\n        description: \"update Desc\"\r\n        startDate: \"12/12/2012\"\r\n        endDate: \"14/11/2013\"\r\n\r\n    }){\r\n      _id\r\n      title\r\n      company\r\n      companyWebsite\r\n      location\r\n      jobTitle\r\n      description\r\n      startDate\r\n        endDate\r\n    }\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.updatePortfolio)\r\n}\r\nconst graphDeletePortfolio = (id) => {\r\n  const query = `\r\n  mutation deletePortfolio {\r\n    deletePortfolio(id: \"${id}\")\r\n  }`;\r\n  return axios.post('http://localhost:3000/graphql', { query })\r\n    .then(({data: graph}) => graph.data)\r\n    .then(data => data.deletePortfolio)\r\n}\r\n\r\n\r\nconst Portfolios = () =>{\r\n\r\nconst {data} = useQuery(GET_PORTFOLIOS)\r\nconst [createPortfolio] = useMutation(CREATE_PORTFOLIO,{\r\n  update(cache, {data : {createPortfolio}}){\r\n    // get data from the cache\r\n    const {portfolios} = cache.readQuery({query : GET_PORTFOLIOS})\r\n    //write on the cache the same data with the new data that we create\r\n    cache.writeQuery({\r\n      query: GET_PORTFOLIOS,\r\n      data: {portfolios : [...portfolios, createPortfolio]}\r\n    })\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\nconst updatePortfolio = async( id)=>{\r\n  const updated = await graphUpdatePortfolio(id)\r\n  console.log(updated);\r\n\r\n  const index = portfolios.findIndex(p => p._id === id)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios[index] = updated\r\n  setPortfolios(newPortfolios)\r\n\r\n\r\n}\r\n\r\nconst deletePortfolio = async (id) =>{\r\n  const deletedPortfolio = await graphDeletePortfolio(id)\r\n  const index = portfolios.findIndex(p => p._id === deletedPortfolio)\r\n  const newPortfolios = portfolios.slice()\r\n  newPortfolios.splice(index,1)\r\n  setPortfolios(newPortfolios)\r\n}\r\n  const portfolios = data && data.portfolios || {};\r\n  return(\r\n    <>\r\n      <section className=\"section-title\">\r\n        <div className=\"px-2\">\r\n          <div className=\"pt-5 pb-4\">\r\n            <h1>Portfolios</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <button\r\n        onClick={createPortfolio}\r\n        className=\"btn btn-primary\">\r\n        create protfolio\r\n      </button>\r\n      <section className=\"pb-5\">\r\n        <div className=\"row\">\r\n          {portfolios.map(portfolio =>(\r\n            <div key={portfolio._id} className=\"col-md-4\">\r\n              <Link\r\n                href={`/portfolios/[id]`}\r\n                as={`/portfolios/${portfolio._id}`}>\r\n                <a className='card-link'><PortfolioCard portfolio={portfolio} /></a>\r\n              </Link>\r\n              <button\r\n              className=\"btn btn-warning\"\r\n              onClick={() => updatePortfolio(portfolio._id)}>\r\n              update portfolio</button>\r\n              <button\r\n              onClick={() =>deletePortfolio(portfolio._id)}\r\n              className=\"btn btn-danger\"\r\n              >\r\n              delete portfolio\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      </section>\r\n    </>\r\n    )\r\n}\r\n// Portfolios.getInitialProps = async () =>{\r\n//   const portfolios = await fetchPortfolios()\r\n//   return {\r\n//     data: {portfolios}\r\n//   }\r\n// }\r\n\r\nexport default withApollo(Portfolios, { getDataFromTree })\r\n"]},"metadata":{},"sourceType":"module"}